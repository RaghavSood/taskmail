// Code generated by go-bindata.
// sources:
// templates/daily.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDailyTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xcd\x52\xdb\x30\x10\xbe\xf3\x14\x3b\x62\x7a\x74\xac\x14\x98\x12\x63\xe7\xd2\x19\x0e\xbd\x96\x3e\x80\x62\x6d\x6c\x0d\xb2\xe4\x4a\x0b\x8e\xcb\xe4\xdd\x3b\x92\x9d\xc4\x8d\x81\x82\x2e\xfa\xf9\x76\xf7\xdb\x5f\xe5\x35\x35\x1a\x76\x8d\x36\xbe\x60\x35\x51\x9b\xa5\x69\xd7\x75\x8b\xee\x6a\x61\x5d\x95\x2e\x57\xab\x55\xba\x0b\x32\x6c\x7d\x01\x90\xd7\x28\x64\x38\x00\xe4\x0d\x92\x00\x23\x1a\x2c\xd8\xb3\xc2\xae\xb5\x8e\x18\x94\xd6\x10\x1a\x2a\x58\xa7\x24\xd5\x85\xc4\x67\x55\x62\x12\x2f\x2c\x9d\x2a\x06\xaa\x04\x7f\x3f\xa9\xe7\x82\x7d\x1f\x94\x92\x87\xbe\xc5\x89\x09\xc2\x1d\xa5\x81\xfa\x0e\xca\x5a\x38\x8f\x54\xfc\x7a\xb8\x4f\x6e\x19\x1c\x2c\x91\x22\x8d\xeb\x07\xe1\x1f\x3d\x6c\xad\x83\x97\x17\x58\x34\x42\x69\x29\x08\x61\xbf\xcf\xd3\x41\x60\x10\xf6\xd4\x6b\x04\xea\x5b\x1c\x4d\x97\xde\xb3\x01\x03\xd8\x58\xd9\xbf\x8c\x67\x80\x46\xb8\x4a\x99\x0c\x38\x88\x27\xb2\x77\xc7\xf7\x56\x48\xa9\x4c\x95\x01\x3f\xbd\x35\xca\x0c\xf1\x65\xb0\xe4\xfc\xcb\x09\xd8\x5a\x43\xc9\x56\x34\x4a\xf7\x19\x78\x61\x7c\xe2\xd1\xa9\xed\x41\x60\x3f\xee\x24\x36\x1a\xe7\xd4\x37\xbc\xdd\x01\x1f\xb7\x73\x9d\x45\x28\x03\xba\x93\x56\x8d\xaa\xaa\x29\x83\x6b\xde\xee\x4e\x1e\x84\x28\x13\xa1\x55\x65\x32\x28\xd1\x10\xba\x33\x8c\x9c\x30\x7e\x6b\x5d\x93\xc1\x53\xdb\xa2\x2b\x85\xc7\xb3\x00\xbc\xfa\x83\x19\x7c\xbd\x9e\xda\x8d\x40\x37\x52\x6e\xac\x96\x33\xff\xc6\x1a\xce\x1d\x5c\x72\x3e\xb3\x34\x50\x2c\x6f\xa7\x80\x56\x06\x93\x83\xd2\xd5\x07\xa3\x3a\xd2\x6f\xad\xa5\x69\x7a\x3e\x10\xec\x7b\xb9\x7a\x3d\xbb\x53\xdf\xe7\xe9\x89\xdd\x96\x81\x22\xa1\x55\xf9\x86\x83\x20\x4e\x2e\x96\x56\x5b\x97\xc1\x25\x8f\xeb\xcc\x2f\x89\xa5\x75\x82\x94\x35\x19\x18\x6b\x66\x35\x1a\xb8\x8c\x75\x8d\xd0\xff\x72\xe5\x69\x04\xe3\xec\xa6\x87\xe1\xcd\x43\xb7\xc3\xa6\x8a\x9c\x05\xbb\xe4\x7c\x75\x73\xfb\x8d\x1d\x86\x2a\x34\xe4\x04\xbd\x8f\x8b\xc1\x30\xd1\x2c\x34\x39\x83\x8d\x75\x12\x5d\xc1\x38\x83\x12\xb5\xf6\xad\x28\x95\xa9\x8e\xf7\x71\x50\xc2\xfd\x30\x61\x39\x39\x28\xb5\xf0\xe1\x9b\x89\xdd\x7b\x44\x02\x26\x21\xfa\x59\xb0\xe3\x88\xc5\x64\x4f\x64\x00\xde\x9c\xf3\x93\x9d\x94\xe4\x91\x2f\x25\xf7\x0a\xf7\xd8\x99\xef\x93\x2f\x67\xdc\x79\xeb\x70\x1d\x68\x49\xf8\x47\xad\x3c\xc5\xef\x25\x3c\x7e\x86\x7c\x28\xfb\xa7\x03\xff\x89\x86\x60\xd3\xc3\x0f\xd1\xff\x87\x2d\x4f\x63\xf5\x86\x72\x87\x2a\xaf\x2f\xf2\xf8\x85\xae\xff\x06\x00\x00\xff\xff\xfd\x29\x94\x1d\xe8\x05\x00\x00")

func templatesDailyTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDailyTmpl,
		"templates/daily.tmpl",
	)
}

func templatesDailyTmpl() (*asset, error) {
	bytes, err := templatesDailyTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/daily.tmpl", size: 1512, mode: os.FileMode(420), modTime: time.Unix(1527297505, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/daily.tmpl": templatesDailyTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"daily.tmpl": &bintree{templatesDailyTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

